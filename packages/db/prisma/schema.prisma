// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProcessedCast {
  hash            String   @id
  originalText    String
  timestamp       DateTime
  processedTime   DateTime @default(now())
  status          String
  actionDetails   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  processingError String?
}

model FidAttestation {
  hash        String?    @unique
  fid         Int
  attestation Bytes
  signInSig   Bytes
  treeId      Int
  MerkleTree  MerkleTree @relation(fields: [treeId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@id([fid, treeId])
}

model MintLog {
  fid       Int
  tokenId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([fid, tokenId])
}

model MerkleTree {
  id              Int               @id @default(autoincrement())
  merkleRoot      String
  Group           Group             @relation(fields: [groupId], references: [id])
  groupId         String
  blockNumber     BigInt
  treeProtoBuf    Bytes?
  bloomFilter     Bytes?
  bloomSipKeys    Bytes[]
  bloomNumHashes  Int?
  bloomNumBits    Int?
  numLeaves       Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  FidAttestation  FidAttestation[]
  IntrinsicCreddd IntrinsicCreddd[]

  @@unique([groupId, blockNumber])
}

model Group {
  id             String     @id
  displayName    String
  typeId         GroupType
  contractInputs Int[]
  score          BigInt?
  state          GroupState @default(Recordable)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merkleTrees MerkleTree[]

  @@unique([id, typeId, contractInputs])
}

enum ContractType {
  ERC20
  ERC721
  ERC1155
  Punk
  Other
}

enum GroupType {
  Static
  CredddTeam
  EarlyHolder
  Whale
  AllHolders
  Ticker
  Believer
  BaseSalon
  BlastSalon
  EthSalon
  OpSalon
  ArbSalon
  FriendBagHolder
}

enum GroupState {
  Recordable
  Unrecordable
  Invalid
}

model Contract {
  id            Int          @id
  address       String
  name          String
  type          ContractType
  deployedBlock BigInt
  chain         String
  isMultiChain  Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([id, address, chain])
}

model EventRSVPs {
  id    Int    @id @default(autoincrement())
  event String
  fid   Int

  attending Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([event, fid])
}

model IntrinsicCreddd {
  id        Int        @id @default(autoincrement())
  fid       Int
  treeId    Int
  MerklTree MerkleTree @relation(fields: [treeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fid, treeId])
}

view User {
  fid      Int      @unique
  score    BigInt
  creddd   String[]
  groupIds String[]
}
