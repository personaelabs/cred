// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProcessedCast {
  hash            String   @id
  originalText    String
  timestamp       DateTime
  processedTime   DateTime @default(now())
  status          String
  actionDetails   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  processingError String?
}

model FidAttestation {
  fid           Int
  attestation   Bytes
  signInSig     Bytes
  treeId        Int
  MerkleTree    MerkleTree   @relation(fields: [treeId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  MerkleTree2   MerkleTree2? @relation(fields: [merkleTree2Id], references: [id])
  merkleTree2Id Int?

  @@id([fid, treeId])
}

model MintLog {
  fid       Int
  tokenId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([fid, tokenId])
}

model MerkleTree {
  id             Int              @id @default(autoincrement())
  merkleRoot     String
  Group          Group            @relation(fields: [groupId], references: [id])
  groupId        Int
  blockNumber    BigInt
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  merkleProofs   MerkleProof[]
  FidAttestation FidAttestation[]

  @@unique([merkleRoot, groupId, blockNumber])
}

model MerkleTree2 {
  id             Int              @id @default(autoincrement())
  merkleRoot     String
  Group          Group            @relation(fields: [groupId], references: [id])
  groupId        Int
  blockNumber    BigInt
  layers         Bytes[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  FidAttestation FidAttestation[]

  @@unique([merkleRoot, groupId, blockNumber])
}

model MerkleProof {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address     String
  path        String[]
  pathIndices Int[]

  MerkleTree MerkleTree @relation(fields: [treeId], references: [id])
  treeId     Int

  @@id([treeId, address])
}

model Group {
  id          Int     @id @default(autoincrement())
  handle      String  @unique
  displayName String
  type        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merkleTrees MerkleTree[]
  MerkleTree2 MerkleTree2[]
}

enum ContractType {
  ERC20
  ERC721
  Other
}

model Contract {
  id            Int          @id @default(autoincrement())
  address       String
  name          String
  type          ContractType
  deployedBlock BigInt
  symbol        String?
  targetGroups  String[]
  chain         String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([address, chain])
}
