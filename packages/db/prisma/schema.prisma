// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MembershipProof {
  proofHash    String   @id
  proof        String
  proofVersion String   @default("v1")
  publicInput  String
  merkleRoot   String?
  message      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model FidAttestation {
  fid         Int
  attestation Bytes
  signInSig   Bytes
  merkleRoot  String
  MerkleTree  MerkleTree @relation(fields: [merkleRoot], references: [merkleRoot])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@id([fid, merkleRoot])
}

model ERC721TransferEvent {
  blockNumber      BigInt
  from             String
  to               String
  tokenId          BigInt
  contractId       Int    @default(0)
  transactionIndex Int
  logIndex         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Contract  Contract @relation(fields: [contractId], references: [id])

  @@unique([blockNumber, transactionIndex, logIndex])
  @@index([to])
  @@index([from])
  @@index([contractId])
}

model ERC20TransferEvent {
  transactionIndex Int
  logIndex         Int
  blockNumber      BigInt
  from             String
  to               String
  value            String
  contractId       Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Contract  Contract @relation(fields: [contractId], references: [id])

  @@unique([blockNumber, transactionIndex, logIndex])
  @@index([to])
  @@index([from])
  @@index([contractId])
  @@index([blockNumber])
}

model ERC20HolderPosition {
  address    String
  contractId Int
  position   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Contract  Contract @relation(fields: [contractId], references: [id])

  @@id([address, contractId])
  @@index([position])
}

model MerkleTree {
  merkleRoot     String           @id
  Group          Group            @relation(fields: [groupId], references: [id])
  groupId        Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  merkleProofs   MerkleProof[]
  FidAttestation FidAttestation[]
}

model MerkleProof {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address     String
  path        String[]
  pathIndices Int[]

  MerkleTree MerkleTree @relation(fields: [merkleRoot], references: [merkleRoot])
  merkleRoot String

  @@id([merkleRoot, address])
}

model Group {
  id          Int    @id @default(autoincrement())
  handle      String @unique
  displayName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merkleTrees MerkleTree[]
}

enum ContractType {
  ERC20
  ERC721
  Other
}

model Contract {
  id            Int          @id @default(autoincrement())
  address       String       @unique
  name          String
  type          ContractType
  deployedBlock BigInt
  coingeckoId   String?
  symbol        String?
  targetGroups  String[]
  decimals      Int          @default(18)
  chain         String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  ERC20TransferEvents  ERC20TransferEvent[]
  ERC721TransferEvents ERC721TransferEvent[]
  ERC20HolderPosition  ERC20HolderPosition[]

  @@unique([address, chain])
}
