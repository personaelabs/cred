// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProcessedCast {
  hash            String   @id
  originalText    String
  timestamp       DateTime
  processedTime   DateTime @default(now())
  status          String
  actionDetails   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  processingError String?
}

model FidAttestation {
  fid         Int
  attestation Bytes
  signInSig   Bytes
  treeId      Int
  MerkleTree  MerkleTree @relation(fields: [treeId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@id([fid, treeId])
}

model MintLog {
  fid       Int
  tokenId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([fid, tokenId])
}

model MerkleTree {
  id             Int              @id @default(autoincrement())
  merkleRoot     String
  Group          Group            @relation(fields: [groupId], references: [id])
  groupId        Int
  blockNumber    BigInt
  treeProtoBuf   Bytes?
  bloomFilter    Bytes?
  bloomSipKeys   Bytes[]
  bloomNumHashes Int?
  bloomNumBits   Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  FidAttestation FidAttestation[]

  @@unique([groupId, blockNumber])
}

model Group {
  id             Int       @id
  displayName    String
  typeId         GroupType
  contractInputs Int[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merkleTrees MerkleTree[]

  @@unique([id, typeId, contractInputs])
}

enum ContractType {
  ERC20
  ERC721
  ERC1155
  Punk
  Other
}

enum GroupType {
  CredddTeam
  EarlyHolder
  Whale
  AllHolders
  Ticker
}

model Contract {
  id            Int          @id
  address       String
  name          String
  type          ContractType
  deployedBlock BigInt
  chain         String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([id, address, chain])
}

model EventRSVPs {
  id    Int    @id @default(autoincrement())
  event String
  fid   Int

  attending Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([event, fid])
}
