// source: merkle_proof.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  return this || window || global || self || Function('return this')();
}.call(null);

goog.exportSymbol('proto.merkle_proof.MerkleProof', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.merkle_proof.MerkleProof = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.merkle_proof.MerkleProof.repeatedFields_,
    null
  );
};
goog.inherits(proto.merkle_proof.MerkleProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.merkle_proof.MerkleProof.displayName = 'proto.merkle_proof.MerkleProof';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.merkle_proof.MerkleProof.repeatedFields_ = [2, 3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.merkle_proof.MerkleProof.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.merkle_proof.MerkleProof.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.merkle_proof.MerkleProof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.merkle_proof.MerkleProof.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: msg.getAddress_asB64(),
        siblingsList: msg.getSiblingsList_asB64(),
        indicesList:
          (f = jspb.Message.getRepeatedBooleanField(msg, 3)) == null
            ? undefined
            : f,
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.merkle_proof.MerkleProof}
 */
proto.merkle_proof.MerkleProof.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.merkle_proof.MerkleProof();
  return proto.merkle_proof.MerkleProof.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.merkle_proof.MerkleProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.merkle_proof.MerkleProof}
 */
proto.merkle_proof.MerkleProof.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addSiblings(value);
        break;
      case 3:
        var values = /** @type {!Array<boolean>} */ (
          reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]
        );
        for (var i = 0; i < values.length; i++) {
          msg.addIndices(values[i]);
        }
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.merkle_proof.MerkleProof.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.merkle_proof.MerkleProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.merkle_proof.MerkleProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.merkle_proof.MerkleProof.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getSiblingsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(2, f);
  }
  f = message.getIndicesList();
  if (f.length > 0) {
    writer.writePackedBool(3, f);
  }
};

/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.merkle_proof.MerkleProof.prototype.getAddress = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 1, '')
  );
};

/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.merkle_proof.MerkleProof.prototype.getAddress_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAddress()));
};

/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.merkle_proof.MerkleProof.prototype.getAddress_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAddress()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.merkle_proof.MerkleProof} returns this
 */
proto.merkle_proof.MerkleProof.prototype.setAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * repeated bytes siblings = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.merkle_proof.MerkleProof.prototype.getSiblingsList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (
    jspb.Message.getRepeatedField(this, 2)
  );
};

/**
 * repeated bytes siblings = 2;
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<string>}
 */
proto.merkle_proof.MerkleProof.prototype.getSiblingsList_asB64 = function () {
  return /** @type {!Array<string>} */ (
    jspb.Message.bytesListAsB64(this.getSiblingsList())
  );
};

/**
 * repeated bytes siblings = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.merkle_proof.MerkleProof.prototype.getSiblingsList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (
    jspb.Message.bytesListAsU8(this.getSiblingsList())
  );
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.merkle_proof.MerkleProof} returns this
 */
proto.merkle_proof.MerkleProof.prototype.setSiblingsList = function (value) {
  return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.merkle_proof.MerkleProof} returns this
 */
proto.merkle_proof.MerkleProof.prototype.addSiblings = function (
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.merkle_proof.MerkleProof} returns this
 */
proto.merkle_proof.MerkleProof.prototype.clearSiblingsList = function () {
  return this.setSiblingsList([]);
};

/**
 * repeated bool indices = 3;
 * @return {!Array<boolean>}
 */
proto.merkle_proof.MerkleProof.prototype.getIndicesList = function () {
  return /** @type {!Array<boolean>} */ (
    jspb.Message.getRepeatedBooleanField(this, 3)
  );
};

/**
 * @param {!Array<boolean>} value
 * @return {!proto.merkle_proof.MerkleProof} returns this
 */
proto.merkle_proof.MerkleProof.prototype.setIndicesList = function (value) {
  return jspb.Message.setField(this, 3, value || []);
};

/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.merkle_proof.MerkleProof} returns this
 */
proto.merkle_proof.MerkleProof.prototype.addIndices = function (
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.merkle_proof.MerkleProof} returns this
 */
proto.merkle_proof.MerkleProof.prototype.clearIndicesList = function () {
  return this.setIndicesList([]);
};

goog.object.extend(exports, proto.merkle_proof);
