// source: group_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  return this || window || global || self || Function('return this')();
}.call(null);

goog.exportSymbol('proto.group_data.GroupDataRequest', null, global);
goog.exportSymbol('proto.group_data.GroupDataResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.group_data.GroupDataRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.group_data.GroupDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.group_data.GroupDataRequest.displayName =
    'proto.group_data.GroupDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.group_data.GroupDataResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.group_data.GroupDataResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.group_data.GroupDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.group_data.GroupDataResponse.displayName =
    'proto.group_data.GroupDataResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.group_data.GroupDataRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.group_data.GroupDataRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.group_data.GroupDataRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.group_data.GroupDataRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.group_data.GroupDataRequest}
 */
proto.group_data.GroupDataRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.group_data.GroupDataRequest();
  return proto.group_data.GroupDataRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.group_data.GroupDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.group_data.GroupDataRequest}
 */
proto.group_data.GroupDataRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.group_data.GroupDataRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.group_data.GroupDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.group_data.GroupDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.group_data.GroupDataRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.group_data.GroupDataRequest.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.group_data.GroupDataRequest} returns this
 */
proto.group_data.GroupDataRequest.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.group_data.GroupDataResponse.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.group_data.GroupDataResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.group_data.GroupDataResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.group_data.GroupDataResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.group_data.GroupDataResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        displayName: jspb.Message.getFieldWithDefault(msg, 1, ''),
        latestMerkleTree: msg.getLatestMerkleTree_asB64(),
        bloomFilter: msg.getBloomFilter_asB64(),
        bloomSipKeysList: msg.getBloomSipKeysList_asB64(),
        bloomNumBits: jspb.Message.getFieldWithDefault(msg, 5, 0),
        bloomNumHashes: jspb.Message.getFieldWithDefault(msg, 6, 0),
        blockNumber: jspb.Message.getFieldWithDefault(msg, 7, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.group_data.GroupDataResponse}
 */
proto.group_data.GroupDataResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.group_data.GroupDataResponse();
  return proto.group_data.GroupDataResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.group_data.GroupDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.group_data.GroupDataResponse}
 */
proto.group_data.GroupDataResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDisplayName(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setLatestMerkleTree(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setBloomFilter(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addBloomSipKeys(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setBloomNumBits(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setBloomNumHashes(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockNumber(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.group_data.GroupDataResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.group_data.GroupDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.group_data.GroupDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.group_data.GroupDataResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getLatestMerkleTree_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getBloomFilter_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getBloomSipKeysList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(4, f);
  }
  f = message.getBloomNumBits();
  if (f !== 0) {
    writer.writeUint32(5, f);
  }
  f = message.getBloomNumHashes();
  if (f !== 0) {
    writer.writeUint32(6, f);
  }
  f = message.getBlockNumber();
  if (f !== 0) {
    writer.writeUint64(7, f);
  }
};

/**
 * optional string display_name = 1;
 * @return {string}
 */
proto.group_data.GroupDataResponse.prototype.getDisplayName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.group_data.GroupDataResponse} returns this
 */
proto.group_data.GroupDataResponse.prototype.setDisplayName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bytes latest_merkle_tree = 2;
 * @return {!(string|Uint8Array)}
 */
proto.group_data.GroupDataResponse.prototype.getLatestMerkleTree = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 2, '')
  );
};

/**
 * optional bytes latest_merkle_tree = 2;
 * This is a type-conversion wrapper around `getLatestMerkleTree()`
 * @return {string}
 */
proto.group_data.GroupDataResponse.prototype.getLatestMerkleTree_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getLatestMerkleTree())
    );
  };

/**
 * optional bytes latest_merkle_tree = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLatestMerkleTree()`
 * @return {!Uint8Array}
 */
proto.group_data.GroupDataResponse.prototype.getLatestMerkleTree_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getLatestMerkleTree())
    );
  };

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.group_data.GroupDataResponse} returns this
 */
proto.group_data.GroupDataResponse.prototype.setLatestMerkleTree = function (
  value
) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes bloom_filter = 3;
 * @return {!(string|Uint8Array)}
 */
proto.group_data.GroupDataResponse.prototype.getBloomFilter = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 3, '')
  );
};

/**
 * optional bytes bloom_filter = 3;
 * This is a type-conversion wrapper around `getBloomFilter()`
 * @return {string}
 */
proto.group_data.GroupDataResponse.prototype.getBloomFilter_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getBloomFilter())
    );
  };

/**
 * optional bytes bloom_filter = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBloomFilter()`
 * @return {!Uint8Array}
 */
proto.group_data.GroupDataResponse.prototype.getBloomFilter_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getBloomFilter())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.group_data.GroupDataResponse} returns this
 */
proto.group_data.GroupDataResponse.prototype.setBloomFilter = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * repeated bytes bloom_sip_keys = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.group_data.GroupDataResponse.prototype.getBloomSipKeysList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (
    jspb.Message.getRepeatedField(this, 4)
  );
};

/**
 * repeated bytes bloom_sip_keys = 4;
 * This is a type-conversion wrapper around `getBloomSipKeysList()`
 * @return {!Array<string>}
 */
proto.group_data.GroupDataResponse.prototype.getBloomSipKeysList_asB64 =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.bytesListAsB64(this.getBloomSipKeysList())
    );
  };

/**
 * repeated bytes bloom_sip_keys = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBloomSipKeysList()`
 * @return {!Array<!Uint8Array>}
 */
proto.group_data.GroupDataResponse.prototype.getBloomSipKeysList_asU8 =
  function () {
    return /** @type {!Array<!Uint8Array>} */ (
      jspb.Message.bytesListAsU8(this.getBloomSipKeysList())
    );
  };

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.group_data.GroupDataResponse} returns this
 */
proto.group_data.GroupDataResponse.prototype.setBloomSipKeysList = function (
  value
) {
  return jspb.Message.setField(this, 4, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.group_data.GroupDataResponse} returns this
 */
proto.group_data.GroupDataResponse.prototype.addBloomSipKeys = function (
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.group_data.GroupDataResponse} returns this
 */
proto.group_data.GroupDataResponse.prototype.clearBloomSipKeysList =
  function () {
    return this.setBloomSipKeysList([]);
  };

/**
 * optional uint32 bloom_num_bits = 5;
 * @return {number}
 */
proto.group_data.GroupDataResponse.prototype.getBloomNumBits = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.group_data.GroupDataResponse} returns this
 */
proto.group_data.GroupDataResponse.prototype.setBloomNumBits = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional uint32 bloom_num_hashes = 6;
 * @return {number}
 */
proto.group_data.GroupDataResponse.prototype.getBloomNumHashes = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.group_data.GroupDataResponse} returns this
 */
proto.group_data.GroupDataResponse.prototype.setBloomNumHashes = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional uint64 block_number = 7;
 * @return {number}
 */
proto.group_data.GroupDataResponse.prototype.getBlockNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.group_data.GroupDataResponse} returns this
 */
proto.group_data.GroupDataResponse.prototype.setBlockNumber = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

goog.object.extend(exports, proto.group_data);
